@model The_Post.Models.VM.SubscriptionStatsVM

@{
    ViewData["Title"] = "SubscriptionStats";
    Layout = "_LayoutForAdmin";
}

<h1><strong><em>Subscription Statistics</em></strong></h1>
<hr />

<div class="container mx-3">
    <!-- Info square -->
    <div class="row">
        <div class="col-md-3">
            <div class="border border-black bg-info-subtle p-2">
                <p class="mb-1"><strong>Total Subscribers: </strong> <em>@Model.TotalSubscribers</em></p>
                <p class="mb-1"><strong>Active Subscriptions: </strong> <em>@Model.ActiveSubscriptions</em></p>
                <p class="mb-1"><strong>Expired Subscriptions: </strong><em>@Model.ExpiredSubscriptions</em></p>
            </div>
        </div>               
    </div>
    
    <div class="row mt-3">
        <!-- Bar Chart -->
        <div class="col-md-6">
            <div class="ratio ratio-16x9">
                <!-- Canvas for Chart.js -->
                <canvas class="border border-dark" id="subscriptionBarChart"></canvas>
            </div>
        </div>
        <!-- Line Chart -->
        <div class="col-md-6">
            <div class="ratio ratio-16x9">
                <!-- Canvas for Chart.js -->
                <canvas class="border border-dark" id="subscriptionLineChart"></canvas>
            </div>
        </div>
    </div>        
</div>

<script>
    // Wait for the DOM to be loaded
    document.addEventListener("DOMContentLoaded", function () {

        // ----- Bar Chart -----
                
        var ctx = document.getElementById('subscriptionBarChart').getContext('2d'); // Get the canvas element and the rendering context type

        // Create a new chart
        var subscriptionBarChart = new Chart(ctx, {
            type: 'bar', // We can also use 'pie' or 'line' here if we want
            data: {
                labels: ['Total', 'Active', 'Expired'], // Labels for the X axis
                datasets: [{
                    label: 'Subscriptions',
                    data: [@Model.TotalSubscribers, @Model.ActiveSubscriptions, @Model.ExpiredSubscriptions], // Data values
                    backgroundColor: ['#284ba7', '#28a745', '#dc3545'], // Colors for the bars
                    borderColor: ['#284ba7','#28a745', '#dc3545'], // Border colors for the bars
                    borderWidth: 1, // Border width for the bars
                    barPercentage: 0.3, // Bar will occupy 60% of the category width
                    categoryPercentage: 0.8 // Category will occupy 80% of the available width                    
                }]
            },
            options: { // Chart configuration options
                responsive: true, // Make the chart automatically resize to fit its container
                plugins: {
                    legend: {
                        position: 'top', // Position the legend (labels for the dataset, e.g., "Subscriptions") at the top of the chart
                    },
                    tooltip: {
                        enabled: true // Enable tooltips that display detailed info (e.g., data values like Total Subscribers) on hover
                    }
                },
                scales: { // Scales for the chart
                    x: {
                        beginAtZero: true // Start the X axis at zero
                    },
                    y: {
                        beginAtZero: true  // Start the Y axis at zero
                    }
                }
            }
        });

        // ----- Line Chart ----- 

        fetch('/Admin/SubscriptionStatsOverTime')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
        .then(data => {
                // Debug: Log the data structure and check if it's valid
                console.log("Data received:", data);
                console.log("Data length:", data.length);

            if (!data || data.length === 0) {
                console.error("No data received from endpoint");

                // Add a placeholder message on the canvas
                var ctxLine = document.getElementById('subscriptionLineChart').getContext('2d');
                ctxLine.font = '20px Arial';
                ctxLine.fillStyle = 'black';
                ctxLine.textAlign = 'center';
                ctxLine.fillText('No subscription data available yet', ctxLine.canvas.width/2, ctxLine.canvas.height/2);
                return;
            }

            // Check the actual structure of first item (if exists)
            if (data.length > 0) {
                console.log("First data item:", data[0]);
                console.log("Month value:", data[0].Month);
                console.log("Total subscribers:", data[0].TotalSubscribers);
            }

            // Continue with your original chart code...
            var labels = data.map(item => item.Month);
            var totalData = data.map(item => item.TotalSubscribers);
            var activeData = data.map(item => item.ActiveSubscriptions);
            var expiredData = data.map(item => item.ExpiredSubscriptions);

            console.log("Labels:", labels);
            console.log("Total data:", totalData);

            // Create the chart...
            var ctxLine = document.getElementById('subscriptionLineChart').getContext('2d');
            var subscriptionLineChart = new Chart(ctxLine, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Total Subscribers',
                            data: totalData,
                            borderColor: '#284ba7',
                            backgroundColor: 'rgba(40, 75, 167, 0.2)',
                            fill: true
                        },
                        {
                            label: 'Active Subscriptions',
                            data: activeData,
                            borderColor: '#28a745',
                            backgroundColor: 'rgba(40, 167, 69, 0.2)',
                            fill: true
                        },
                        {
                            label: 'Expired Subscriptions',
                            data: expiredData,
                            borderColor: '#dc3545',
                            backgroundColor: 'rgba(220, 53, 69, 0.2)',
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        tooltip: { enabled: true }
                    },
                    scales: {
                        x: { beginAtZero: false },
                        y: { beginAtZero: true }
                    }
                }
            });
        })
        .catch(error => {
            console.error('Error fetching subscription data:', error);
            // Display error message on canvas
            var ctxLine = document.getElementById('subscriptionLineChart').getContext('2d');
            ctxLine.font = '16px Arial';
            ctxLine.fillStyle = 'red';
            ctxLine.textAlign = 'center';
            ctxLine.fillText('Error loading subscription data', ctxLine.canvas.width/2, ctxLine.canvas.height/2);
        });
    });    
</script>

